#!/bin/bash
# vim: ft=sh

set -e -u -x

ENV_FILE_OWNER=vcap

mkdir -p /var/vcap/jobs/bbr-atcdb/config/env

<%
  # vim: ft=eruby

  def env_file_perms(fn)
    <<~EOS
      if [[ "${ENV_FILE_OWNER:-}" != "" ]] ; then
        chown ${ENV_FILE_OWNER}:${ENV_FILE_OWNER} #{fn}
      fi
      chmod 0600 #{fn}
    EOS
  end

  def env_file_content(v)
    case v
    when Array
      v.collect(&:chomp).join("\n").chomp + "\n"
    when String
      v.chomp + "\n"
    else
      v.to_json + "\n"
    end
  end

  def env_file_writer(v, env)
    path = "/var/vcap/jobs/bbr-atcdb/config/env/#{env}"

    case v
    when Hash
      v.collect do |k, v|
        fn = "#{path}_#{k}"
        "cat > #{fn} <<\"ENVGEN_EOF\"\n#{env_file_content(v)}ENVGEN_EOF\n#{env_file_perms(fn)}"
      end.join("\n\n")
    else
      "cat > #{path} <<\"ENVGEN_EOF\"\n#{env_file_content(v)}ENVGEN_EOF\n#{env_file_perms(path)}"
    end
  end
-%>


<%
    require 'json'

    postgres_host = p("postgresql.host", "")
    postgres_port = p("postgresql.port", 0)
    postgres_database = p("postgresql.database", "")
    postgres_role_name = p("postgresql.role.name", "")
    postgres_role_password = p("postgresql.role.password", "")
    postgres_tls_enabled = p("postgresql.tls.enabled", false)
    postgres_tls_skip_host_verify = false
    postgres_tls_ca = ""
    postgres_tls_public_cert = ""
    postgres_tls_private_key = ""

    if postgres_tls_enabled
      postgres_tls_skip_host_verify = p("postgresql.tls.skip_host_verify", false)
      postgres_tls_ca = p("postgresql.tls.cert.ca")
      postgres_tls_public_cert = p("postgresql.tls.cert.certificate")
      postgres_tls_private_key = p("postgresql.tls.cert.private_key")
    end

    if postgres_host.empty?
      if_link("concourse_db") do |cdb|
        postgres_host = cdb.p("postgresql.host", "")
      end

      if postgres_host.empty?
        if_link("postgres") do |postgres|
          postgres_host = postgres.instances.first.address
        end
      end

      if postgres_host.empty?
        raise "postgres.host not found through either properties or links"
      end
    end

    if postgres_database.empty?
      if_link("concourse_db") do |cdb|
        postgres_database = cdb.p("postgresql.database", "")
      end

      if postgres_database.empty?
        postgres_database = "atc"
      end
    end

    if postgres_port.zero?
      if_link("concourse_db") do |cdb|
        postgres_port = cdb.p("postgresql.port", 0)
      end

      if postgres_port.zero?
        if_link("postgres") do |postgres|
          postgres_port = postgres.p("databases.port", 0)
        end
      end

      if postgres_port.zero?
        postgres_port = 5432
      end
    end

    if postgres_role_name.empty?
      if_link("concourse_db") do |cdb|
        postgres_role_name = cdb.p("postgresql.role.name", "")
      end

      if postgres_role_name.empty?
        raise "postgres.role.name not found through either properties or links"
      end
    end

    if postgres_role_password.empty?
      if_link("concourse_db") do |cdb|
        postgres_role_password = cdb.p("postgresql.role.password", "")
      end

      if postgres_role_password.empty?
        raise "postgres.role.password not found through either properties or links"
      end
    end

    if_link("concourse_db") do |cdb|
      postgres_tls_enabled = cdb.p("postgresql.sslmode", postgres_tls_enabled)
      if postgres_tls_enabled
        if postgres_tls_ca.empty?
          postgres_tls_ca = cdb.p("postgresql.ca_cert.ca")
        end

        if postgres_tls_public_cert.empty?
          postgres_tls_public_cert = cdb.p("postgresql.client_cert.certificate")
        end

        if postgres_tls_private_key.empty?
          postgres_tls_private_key = cdb.p("postgresql.client_cert.private_key")
        end
      end
    end
-%>


<%
  connection_string = "host="+postgres_host \
    +" user="+postgres_role_name \
    +" password="+postgres_role_password \
    +" port="+postgres_port.to_s() \
    +" dbname="+postgres_database

    sslmode = "disable"

    if postgres_tls_enabled
      # verify ca and host cert
      sslmode = "verify-full"

      if postgres_tls_skip_host_verify
        # still verify ca but not the host certificate
        sslmode = "verify-ca"
      end
-%>
<%
      unless postgres_tls_ca.empty?
-%>
<%=     env_file_writer(postgres_tls_ca, "CONCOURSE_TLS_CA") %>
<%
        connection_string += " sslrootcert=/var/vcap/jobs/bbr-atcdb/config/env/CONCOURSE_TLS_CA" \
      end

      unless postgres_tls_public_cert.empty?
-%>
<%=     env_file_writer(postgres_tls_public_cert, "CONCOURSE_TLS_CERTIFICATE") %>
<%
        connection_string += " sslcert=/var/vcap/jobs/bbr-atcdb/config/env/CONCOURSE_TLS_CERTIFICATE" \
      end

      unless postgres_tls_private_key.empty?
-%>
<%=     env_file_writer(postgres_tls_private_key, "CONCOURSE_TLS_PRIVATE_KEY") %>
<%
        connection_string += " sslkey=/var/vcap/jobs/bbr-atcdb/config/env/CONCOURSE_TLS_PRIVATE_KEY"
      end
    end

    connection_string += " sslmode="+sslmode
-%>

<%= "PG_CONNECTION_STRING=\""+connection_string+"\"" %>
